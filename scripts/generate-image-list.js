/**
 * @fileoverview
 * This script automatically generates the `src/core/assets/images/index.ts` file
 * by scanning all image files within the directory.
 * It correctly handles React Native's density suffixes (@2x, @3x) and
 * converts filenames to camelCase to be used as keys in the exported object.
 */

const fs = require('fs');
const path = require('path');

// --- Configuration ---
const IMAGES_DIR = path.join(__dirname, '../src/core/assets/images');
const OUTPUT_FILE = path.join(IMAGES_DIR, 'index.ts');
const SUPPORTED_EXTENSIONS = ['.png', '.jpg', '.jpeg', '.gif', '.svg'];
// --------------------

/**
 * Converts a string to a safe camelCase identifier.
 * Handles kebab-case, snake_case, and spaces.
 * e.g., 'icon-profile 1' -> 'iconProfile1'
 * @param {string} str The input string (filename without extension).
 * @returns {string} The camelCased string.
 */
function toCamelCase(str) {
  // Remove invalid characters, then convert to camelCase
  return str
    .replace(/[^a-zA-Z0-9-_ ]/g, '') // Allow letters, numbers, hyphens, underscores, spaces
    .replace(/[-_ ]+(.)?/g, (_, char) => (char ? char.toUpperCase() : ''));
}

/**
 * Main function to generate the image list file.
 */
function generateImageList() {
  console.log(`Scanning for images in: ${IMAGES_DIR}`);

  // Ensure the target directory exists
  if (!fs.existsSync(IMAGES_DIR)) {
    console.error(`❌ Error: Directory not found at ${IMAGES_DIR}`);
    process.exit(1);
  }

  try {
    const files = fs.readdirSync(IMAGES_DIR);

    // Use a Set to store unique base asset paths to avoid duplicates from @2x, @3x files.
    const uniqueAssets = new Set();

    files.forEach(file => {
      const ext = path.extname(file).toLowerCase();
      if (SUPPORTED_EXTENSIONS.includes(ext) && file !== 'index.ts') {
        // Strip the density suffix (@2x, @3x) to get the base asset name for require().
        // e.g., 'icon@2x.png' -> 'icon.png'
        const baseName = file.replace(
          /@\dx\.(png|jpg|jpeg|gif|svg)$/,
          `.${ext.slice(1)}`,
        );
        uniqueAssets.add(baseName);
      }
    });

    const imageEntries = Array.from(uniqueAssets)
      .map(file => {
        const ext = path.extname(file);
        const filenameWithoutExt = path.basename(file, ext);
        const key = toCamelCase(filenameWithoutExt);
        // The code line for each image, e.g., `  logo: require('./logo.png'),`
        return `  ${key}: require('./${file}'),`;
      })
      .sort(); // Sort entries alphabetically for consistent output

    if (imageEntries.length === 0) {
      console.warn(
        '⚠️ No images found. The generated image list will be empty.',
      );
    }

    // The full content of the generated file
    const fileContent = `/**
 * @fileoverview
 * This file is auto-generated by the 'scripts/generate-image-list.js' script.
 * Do not edit this file manually. All changes will be overwritten.
 */

export const imageList = {
${imageEntries.join('\n')}
};
`;

    fs.writeFileSync(OUTPUT_FILE, fileContent, 'utf8');
    console.log(
      `✅ Successfully generated ${OUTPUT_FILE} with ${imageEntries.length} unique assets.`,
    );
  } catch (error) {
    console.error('❌ Error generating image list:', error);
    process.exit(1); // Exit with an error code
  }
}

// Run the main function
generateImageList();
